{"remainingRequest":"/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/adebayooluyemi/Documents/my-cscore-final/src/views/Dashboard.vue?vue&type=template&id=22ba47ca&scoped=true&","dependencies":[{"path":"/Users/adebayooluyemi/Documents/my-cscore-final/src/views/Dashboard.vue","mtime":1592220639435},{"path":"/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/adebayooluyemi/Documents/my-cscore-final/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}